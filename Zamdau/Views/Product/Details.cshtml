@model OrderDetailsViewModel

<div class="container mt-4 ">
    <h2>Order Details</h2>
    <hr />

    <!-- Informações do Pedido -->
    <div class="card mb-4 bg-dark text-light">
        <div class="card-header">
            <h4>Order #@Model.OrderNumber</h4>
        </div>
        <div class="card-body bg-dark ">
            <p>
                <strong>Status:</strong>
                <span class="badge
        @(Model.Status == "Completed" ? "badge-success" :
          Model.Status == "Processing" ? "badge-warning" :
          Model.Status == "Shipped" ? "badge-info" :
          Model.Status == "Pending" ? "badge-grey" :
          Model.Status == "Cancelled" ? "badge-danger" : "badge-secondary")">
                    @Model.Status
                </span>

            </p>
            <p><strong>Order Date:</strong> @Model.OrderDate.ToString("dd/MM/yyyy")</p>
            <p><strong>Total:</strong> @Model.Total.ToString("C")</p>
        </div>
    </div>

    <!-- Produtos no Pedido -->
    <div class="card mb-4 bg-dark">
        <div class="card-header bg-dark">
            <h5>Products</h5>
        </div>
        <div class="card-body bg-dark">
            <table class="table table-dark table-hover">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Products)
                    {

                        <tr>
                            <td><a asp-action="ViewProduct" asp-controller="Product" asp-route-id="@item.Id" class="link-warning">@item.Name</a></td>
                            <td>@item.Quantity</td>
                            <td>@item.Price.ToString("C")</td>
                            <td>@((item.Quantity * item.Price).ToString("C"))</td>
                        </tr>

                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Botões de Ação -->
    <div class="d-flex justify-content-between">
        <a asp-action="Orders" asp-controller="Product" class="btn btn-outline-secondary">Back to Orders</a>
        @if (Model.Status == "Pending" || Model.Status == "Processing")
        {
            <a href="/orders/cancel/@Model.Id" class="btn btn-outline-danger">Cancel Order</a>
        }
        else
        {
            <div data-bs-toggle="tooltip" title="You can only cancel pending or processing orders.">
                <button class="btn btn-outline-danger" disabled>Cancel Order</button>
            </div>

        }

    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.forEach(function (tooltipTriggerEl) {
            new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });

</script>
@*
Status Comuns e Cancelamento
Pending (Pendente):

Possível cancelar: O pedido está aguardando confirmação ou processamento inicial.
Motivo: Nenhuma ação definitiva foi tomada no pedido.
Processing (Processando):

Possível cancelar, dependendo da lógica de negócio:
Se o processamento ainda não envolveu o envio do pedido.
Após o envio começar, o cancelamento pode não ser permitido.
Motivo: Produtos podem já estar em preparação ou prontos para envio.
Shipped (Enviado):

Não é possível cancelar diretamente.
Motivo: O pedido já saiu para entrega. O cliente pode solicitar um reembolso ou devolução.
Completed (Concluído):

Não é possível cancelar.
Motivo: O pedido foi entregue ao cliente.
Cancelled (Cancelado):

Não é necessário exibir a opção.
Motivo: O pedido já foi cancelado.


*@