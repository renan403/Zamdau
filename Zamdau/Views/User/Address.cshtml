@model Address
@{
    ViewBag.Title = "Address";
}

<style>
    body {
        font-family: 'Arial', sans-serif;
    }
</style>

<div class="cart-container ">
    <div class="">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb p-3  rounded-3">
                <li class="breadcrumb-item">
                    <a class="  text-decoration-none link-orange" href="#">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                            <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
                            <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1" />
                        </svg>
                        Account
                    </a>
                </li>
                <li class="breadcrumb-item ">
                    <a class="text-decoration-none link-light ">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-globe-americas" viewBox="0 0 16 16">
                            <path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0M2.04 4.326c.325 1.329 2.532 2.54 3.717 3.19.48.263.793.434.743.484q-.121.12-.242.234c-.416.396-.787.749-.758 1.266.035.634.618.824 1.214 1.017.577.188 1.168.38 1.286.983.082.417-.075.988-.22 1.52-.215.782-.406 1.48.22 1.48 1.5-.5 3.798-3.186 4-5 .138-1.243-2-2-3.5-2.5-.478-.16-.755.081-.99.284-.172.15-.322.279-.51.216-.445-.148-2.5-2-1.5-2.5.78-.39.952-.171 1.227.182.078.099.163.208.273.318.609.304.662-.132.723-.633.039-.322.081-.671.277-.867.434-.434 1.265-.791 2.028-1.12.712-.306 1.365-.587 1.579-.88A7 7 0 1 1 2.04 4.327Z" />
                        </svg>
                        Address
                    </a>
                </li>
            </ol>
        </nav>
    </div>
</div>

<div class="cart-container m-auto m-2 ">

    <h2>Your Addresses</h2>

    <div class="address-list">


        @if (Model.Zip is null)
        {
            <div class="container m-3 my-5">
                <div class="col">
                    <div class="">
                        <div class="card-body text-center justify-content-between align-items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-pin-map" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M3.1 11.2a.5.5 0 0 1 .4-.2H6a.5.5 0 0 1 0 1H3.75L1.5 15h13l-2.25-3H10a.5.5 0 0 1 0-1h2.5a.5.5 0 0 1 .4.2l3 4a.5.5 0 0 1-.4.8H.5a.5.5 0 0 1-.4-.8z" />
                                <path fill-rule="evenodd" d="M8 1a3 3 0 1 0 0 6 3 3 0 0 0 0-6M4 4a4 4 0 1 1 4.5 3.969V13.5a.5.5 0 0 1-1 0V7.97A4 4 0 0 1 4 3.999z" />
                            </svg>
                            <p class="card-text">Your address is empty</p>
                            <a asp-action="RegisterAddress" class="btn btn-outline-orange  w-100">Add New Address</a>
                        </div>

                    </div>
                </div>
            </div>


        }
        else
        {
            <h3 class="mb-4">Registered Address</h3>
            <ul id="addressList" class="list-unstyled">
                <li>
                    <form asp-action="UpdateAddress" method="post" class="address-form main" data-id="1">

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="name" class="form-label">Name</label>
                                <input type="text" id="name" name="name" class="form-control" value="@Model.Recipient" disabled>
                                @Html.ValidationMessageFor(model => model.Recipient, "", new { @class = "text-danger" })
                            </div>
                        </div> 
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="street" class="form-label">Street</label>
                                <input type="text" id="street" name="street" class="form-control" value="@Model.Street" readonly disabled>
                                @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="state" class="form-label">State</label>
                                <input type="text" id="state" name="state" class="form-control" value="@Model.State" readonly disabled>
                                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                <label for="zip" class="form-label">ZIP</label>
                                <input type="text" id="zip" name="zip" class="form-control" value="@Model.Zip" disabled onblur="lookupAddress()">
                                @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="country" class="form-label">Country</label>
                            @*<input type="text" id="country" name="country" class="form-control" value="@Model.Country" disabled>*@
                            <select id="country" name="country" class="form-select w-100" required onchange="lookupAddress()" disabled>
                                <option value="Brazil" selected="@(Model.Country == "Brazil")">Brazil</option>
                                <option value="United States" selected="@(Model.Country == "United States")">United States</option>
                            </select>
                            @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                        </div>

                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-primary edit-button" type="button">Edit</button>

                            <a asp-action="DeleteAddress" class="btn btn-outline-danger delete-button" type="button">Delete</a>

                            <button class="btn btn-outline-success save-button" type="submit" style="display: none;" onclick="showAlertPositive('Updating')">Save</button>

                            <button class="btn btn-outline-danger cancel-button" type="button" style="display: none;">Cancel</button>
                        </div>
                    </form>
                </li>


            </ul>
        }
    </div>


</div>

<div id="alert-box" class="custom-alert"></div>  


<script>
    
    document.querySelectorAll('.edit-button').forEach(button => {
        button.addEventListener('click', function () {
            const form = this.closest('.address-form');
           
            const inputs = form.querySelectorAll('input:not([readonly]),select');
            const saveButton = form.querySelector('.save-button');
            const deleteButton = form.querySelector('.delete-button');
            const cancelButton = form.querySelector('.cancel-button');

            // Habilita os campos de input para edição
            inputs.forEach(input => input.disabled = false);
            
            // Mostra botões "Save" e "Cancel", oculta "Edit"
            this.style.display = 'none';
            deleteButton.style.display = 'none';
            saveButton.style.display = 'block';
            cancelButton.style.display = 'block';
        });
    });

    document.querySelectorAll('.cancel-button').forEach(button => {
        button.addEventListener('click', function () {
            const form = this.closest('.address-form');
            const inputs = form.querySelectorAll('input');
            const selects = form.querySelectorAll('select');
            const editButton = form.querySelector('.edit-button');
            const saveButton = form.querySelector('.save-button');
            const deleteButton = form.querySelector('.delete-button');

            // Restaurar os valores dos inputs e selects
            inputs.forEach(input => {
                input.value = input.defaultValue;  // Restaura o valor original do input
                input.disabled = true;
            });

            selects.forEach(select => {
                // Restaurar o valor do select ao valor inicial
                const originalValue = select.getAttribute('data-original-value');
                select.value = originalValue || select.value;
                select.disabled = true;
            });

            // Restaurar os botões
            editButton.style.display = 'block';
            deleteButton.style.display = 'block';
            saveButton.style.display = 'none';
            this.style.display = 'none';
        });
    });

    // Salve o valor original do select quando ele for carregado
    document.querySelectorAll('select').forEach(select => {
        select.setAttribute('data-original-value', select.value);
    });



    document.querySelectorAll('.address-form').forEach(form => {
        const inputs = form.querySelectorAll('input');
        const editButton = form.querySelector('.edit-button');
        const saveButton = form.querySelector('.save-button');
        const cancelButton = form.querySelector('.cancel-button');
        const deleteButton = form.querySelector('.delete-button');

        editButton.addEventListener('click', function () {
            // Habilitar os inputs para edição
            inputs.forEach(input => input.disabled = false);

            // Mostrar/ocultar botões
            editButton.style.display = 'none';
            deleteButton.style.display = 'none';
            saveButton.style.display = 'block';
            cancelButton.style.display = 'block';
        });

        cancelButton.addEventListener('click', function () {
            // Reverter os valores dos inputs para o estado original
            inputs.forEach(input => {
                input.value = input.defaultValue;
                input.disabled = true;
            });

            // Restaurar os botões
            editButton.style.display = 'block';
            deleteButton.style.display = 'block';
            saveButton.style.display = 'none';
            cancelButton.style.display = 'none';
        });
    });
 
    
</script>
